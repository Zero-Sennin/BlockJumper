<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.5;
hsp = 0;
vsp = 0;
jumpspeed = 10;
runJumpSpeed = 12;
movespeed = 4;
runSpeed = 6;
myDir = 1;

numJumps = 0;
maxJumps = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input Check

//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_sprint = keyboard_check(vk_shift);
key_jump = keyboard_check_pressed(vk_space);

//React to inputs
move = key_left + key_right; //Set move to 1, -1, or 0 depending on key inputs

if (!key_sprint)
    hsp = move * movespeed; //Set movement speed to your speed + your direction

else
    hsp = move * runSpeed;
    
if (keyboard_check_pressed(vk_right))
{
    myDir = 1;
}

else if (keyboard_check_pressed(vk_left))
{
    myDir = -1;
}

//If your vertical speed hasn't exceeded 10, add gravity to it
if (vsp &lt; 10) 
{ 
    vsp += grav; 
}

//Jump
if (place_meeting(x,y+1,obj_floor) || place_meeting(x,y+1,obj_wall)) //Checks if there's a collision with a wall 1 px below us
{
    numJumps = maxJumps;
}

if (key_jump &amp;&amp; numJumps &gt; 0)
{
    numJumps--;
    
    if (!key_sprint || (key_sprint &amp;&amp; (!key_left &amp;&amp; !key_right)))
        vsp = key_jump * -jumpspeed;
        
    else if (key_sprint &amp;&amp; (key_left || key_right))
        vsp = key_jump * -runJumpSpeed;
}

//Walljump
if (key_jump) 
{
    if place_meeting(x+1,y,obj_wall) &amp;&amp; !place_meeting(x,y-1,obj_wall) //&amp;&amp; key_right
    {
        hsp = -1;
        vsp = -jumpspeed;
    }

    if place_meeting(x-1,y,obj_wall) &amp;&amp; !place_meeting(x,y+1,obj_wall) //&amp;&amp; key_left
    {
        hsp = 1;
        vsp = -jumpspeed;
    }
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall)) //Checks if there's a collision with a wall some distance away from your current speed
{
    while(!place_meeting(x+sign(hsp),y,obj_wall)) //As long as you're not colliding with the wall
    {
        x += sign(hsp); //Move slowly toward the wall
    }
    hsp = 0;
}

else if (place_meeting(x+hsp,y,obj_floor)) //Checks if there's a collision with a wall some distance away from your current speed
{
    while(!place_meeting(x+sign(hsp),y,obj_floor)) //As long as you're not colliding with the wall
    {
        x += sign(hsp); //Move slowly toward the wall
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

else if (place_meeting(x,y+vsp,obj_floor))
{
    while(!place_meeting(x,y+sign(vsp),obj_floor))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//Out of bounds
if ((x &lt; 0 || x &gt; room_width) 
    || (y &lt; 0 || y &gt; room_height)) 
    
    {
        score = 0;
        room_restart();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x,y,myDir,image_yscale,image_angle,c_white,image_alpha);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
